terms:
  - term: "RTFM"
    definition: "Read The F***ing Manual"
    explanation: "A gentle reminder to check the documentation before asking questions"
    humor: "The four most powerful letters in tech support, capable of solving 90% of problems and hurting 100% of feelings"
    tags: ["acronym", "documentation", "support"]
    see_also: ["LMGTFY", "PEBKAC"]
    
  - term: "Yak Shaving"
    definition: "Doing a series of seemingly unrelated tasks before you can do what you actually intended"
    explanation: "You start trying to fix a bug, and somehow end up updating your entire OS"
    humor: "I came here to write code, and somehow I'm now learning about Tibetan yak grooming techniques"
    tags: ["productivity", "procrastination"]
    
  - term: "FOSS"
    definition: "Free and Open Source Software"
    explanation: "Software that's free as in freedom AND free as in beer"
    humor: "Where programmers work for free to make software that companies will use to make millions"
    tags: ["acronym", "philosophy", "licensing"]
    see_also: ["GPL", "MIT License", "Copyleft"]

  - term: "Bus Factor"
    definition: "The number of team members that can be hit by a bus before a project fails"
    explanation: "A metric that measures how many developers need to suddenly disappear before a project can no longer continue. A bus factor of 1 means the project relies on a single person - extremely risky!"
    humor: "Also known as the 'lottery factor' for optimists who prefer their team members winning millions over getting flattened. Some companies have tried improving their bus factor by banning employees from traveling together, which rather misses the point."
    tags: ["project-management", "risk", "metrics", "dark-humor"]
    see_also: ["Single Point of Failure", "Documentation", "Knowledge Silo"]
    controversy_level: "low"

  - term: "Dependency Hell"
    definition: "A situation where software dependencies become so tangled, outdated, or incompatible that progress grinds to a halt"
    explanation: "You try to install a package, but it needs a newer version of another package, which conflicts with a third package, which depends on a deprecated library that only works on an older OS you no longer have. Every fix breaks something else."
    humor: "Like a soap opera for code: everyone’s connected, nobody’s happy, and you’re stuck watching the drama unfold while your build fails."
    tags: ["package-management", "frustration", "software-maintenance"]
    see_also: ["Version Pinning", "DLL Hell", "Semantic Versioning"]
    controversy_level: "medium"

  - term: "License Proliferation"
    definition: "The overabundance of open source licenses, often with subtle but significant differences, making it difficult to combine or reuse code across projects."
    explanation: "You find a great library under GPL, another under Apache, and a third under MPL. Each has slightly different requirements about attribution, distribution, or linking. Suddenly, your 'simple' project feels like you need a law degree just to ship a prototype."
    humor: "Like trying to host a potluck where everyone insists on bringing food—but only if you agree to eat it under their very specific house rules."
    tags: ["open-source", "legal", "compatibility", "community"]
    see_also: ["GPL", "MIT License", "Copyleft", "License Compatibility"]
    controversy_level: "high"

  - term: "Code Hoarding"
    definition: "The tendency to accumulate large amounts of code, libraries, or tools—often unused—under the belief they might be useful someday."
    explanation: "You clone dozens of GitHub repos, bookmark obscure CLI tools, and write half-finished scripts for problems you haven’t encountered yet. Your project folder resembles a digital attic more than a workspace."
    humor: "Like stocking up on canned beans for a zombie apocalypse that never comes—except the beans are Python scripts and the zombies are edge cases."
    tags: ["developer-habits", "tooling", "overengineering", "FOMO"]
    see_also: ["Overengineering", "Not Invented Here", "Premature Optimization"]
    controversy_level: "low"

  - term: "Zombie Dependencies"
    definition: "Outdated or abandoned libraries that are still widely used, often without active maintenance or clear alternatives."
    explanation: "You build your app on a popular framework, only to discover one of its core dependencies hasn’t been updated in five years. The maintainer is unreachable, the issues pile up, and you're left wondering whether to fork it or flee."
    humor: "Like relying on a haunted vending machine — it still dispenses snacks, but nobody knows how or why it’s still running."
    tags: ["dependencies", "maintenance", "technical-debt", "risk"]
    see_also: ["Dependency Hell", "Forking", "Maintainer Burnout"]
    controversy_level: "medium"

  - term: "Maintainer Burnout"
    definition: "The exhaustion and disengagement experienced by open source maintainers who face constant demands, limited support, and little recognition."
    explanation: "A project gains popularity, issues and pull requests flood in, and suddenly the maintainer is expected to provide free tech support, security patches, and feature development around the clock. Without backup or funding, enthusiasm turns into fatigue."
    humor: "Like being the only bartender at a never-ending party where everyone wants a custom cocktail, but nobody tips."
    tags: ["community", "sustainability", "mental-health", "open-source"]
    see_also: ["Bus Factor", "Abandonware", "Forking"]
    controversy_level: "high"




