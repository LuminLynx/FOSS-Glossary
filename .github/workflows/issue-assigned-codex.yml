name: Codex issue intake

on:
  issues:
    types: [assigned, labeled]

permissions:
  contents: read
  issues: write
  pull-requests: read

env:
  ACK_LABEL: in-progress
  CODEX_LABEL: codex

jobs:
  acknowledge:
    if: github.event.issue.state == 'open'
    runs-on: ubuntu-latest
    steps:
      - name: Acknowledge assignment as Codex bot
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.CODEX_FOSS_TOK != '' && secrets.CODEX_FOSS_TOK || secrets.GITHUB_TOKEN }}
          script: |
            const marker = '<!-- codex-acknowledged -->';
            const ackLabel = (process.env.ACK_LABEL || '').trim();
            const codexLabel = (process.env.CODEX_LABEL || 'codex').toLowerCase();
            const botLogin = (process.env.CODEX_BOT_LOGIN || 'my-codex-bot').toLowerCase();
            const hasCustomToken = process.env.HAS_CUSTOM_TOKEN === 'true';
            const summary = core.summary;

            const skip = async (reason) => {
              await summary
                .addHeading('Codex bot acknowledgement skipped')
                .addRaw(reason)
                .write();
            };

            const { owner, repo } = context.repo;
            const issue_number = context.issue.number;
            const issue = context.payload.issue;

            const assignees = issue.assignees || [];
            const labels = issue.labels || [];

            const assignedToBot = assignees.some(a => (a.login || '').toLowerCase() === botLogin);
            if (!assignedToBot) {
              const message = `Issue #${issue_number} is not assigned to @${botLogin}. No acknowledgement posted.`;
              core.info(message);
              await skip(message);
              return;
            }

            const hasCodexLabel = labels.some(l => (l.name || '').toLowerCase() === codexLabel);
            if (!hasCodexLabel) {
              const message = `Issue #${issue_number} is missing the required "${codexLabel}" label. No acknowledgement posted.`;
              core.info(message);
              await skip(message);
              return;
            }

            const ackBody = `${marker}\nüëã Thanks for the assignment! @${issue.user.login} Codex is on it.\n\nI'll follow up here with questions or a pull request update once work begins.\n\n_This acknowledgement was posted automatically._`;

            const existingComments = await github.paginate(github.rest.issues.listComments, { owner, repo, issue_number });
            const alreadyAcknowledged = existingComments.some(comment => (comment.body || '').includes(marker));

            if (!alreadyAcknowledged) {
              await github.rest.issues.createComment({ owner, repo, issue_number, body: ackBody });
              core.info(`Posted acknowledgement on issue #${issue_number} as ${botLogin}.`);
            } else {
              core.info(`Issue #${issue_number} was already acknowledged. Skipping comment.`);
            }

            if (ackLabel && ackLabel.toLowerCase() !== codexLabel) {
              try {
                await github.rest.issues.addLabels({ owner, repo, issue_number, labels: [ackLabel] });
                core.info(`Applied label "${ackLabel}" to issue #${issue_number}.`);
              } catch (error) {
                if (error.status === 404) {
                  core.info(`Label "${ackLabel}" not found. Creating it before applying.`);
                  await github.rest.issues.createLabel({
                    owner,
                    repo,
                    name: ackLabel,
                    color: '0E8A16',
                    description: 'Issue is being handled by Codex bot',
                  }).catch(() => core.info(`Label "${ackLabel}" may already exist. Continuing.`));
                  await github.rest.issues.addLabels({ owner, repo, issue_number, labels: [ackLabel] });
                } else {
                  throw error;
                }
              }
            }

            summary.addHeading('Codex bot acknowledgement complete')
              .addRaw(`Issue #${issue_number} assigned to **@${botLogin}** acknowledged successfully.`);

            if (!hasCustomToken) {
              summary.addRaw('\n\n‚ö†Ô∏è Using the default `GITHUB_TOKEN`. Add the `CODEX_FOSS_TOK` secret so the bot can act across repositories if needed.');
            }

            await summary.write();
        env:
          CODEX_BOT_LOGIN: ${{ vars.CODEX_BOT_LOGIN }}
          HAS_CUSTOM_TOKEN: ${{ secrets.CODEX_FOSS_TOK != '' }}
