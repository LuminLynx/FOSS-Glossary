name: Validate & Score Terms

on:
  pull_request:
    paths:
      - 'terms.yaml'
  push:
    branches: [main]
    paths:
      - 'terms.yaml'

permissions:
  contents: write
  pull-requests: write
  issues: write
  actions: read
  checks: write

jobs:
  validate-and-score:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: '20'  # ‚Üê CHANGED TO 20
      
      - name: Install dependencies
        run: npm install js-yaml
      
      - name: Validate terms
        id: validate
        continue-on-error: true
        run: |
          node scripts/validateTerms.js 2>&1 | tee validation-output.txt
          echo "valid=$?" >> $GITHUB_OUTPUT
          {
            echo 'validation_output<<EOF'
            cat validation-output.txt
            echo EOF
          } >> $GITHUB_OUTPUT
      
      - name: Score term (only if valid)
        id: score
        if: steps.validate.outputs.valid == '0'
        continue-on-error: true  # ‚Üê ADDED THIS
        run: |
          node scripts/quickScore.js > output.txt 2>&1 || true
          cat output.txt
          echo "score=$(grep 'SCORE:' output.txt | cut -d: -f2 || echo '0')" >> $GITHUB_OUTPUT
          echo "badge=$(grep 'BADGE:' output.txt | cut -d: -f2- || echo '')" >> $GITHUB_OUTPUT
      
      - name: Comment on PR
        if: github.event_name == 'pull_request'  # ‚Üê ADDED CHECK
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}  # ‚Üê EXPLICIT TOKEN
          script: |
            try {
              const isValid = '${{ steps.validate.outputs.valid }}' === '0';
              const validationOutput = `${{ steps.validate.outputs.validation_output }}`;
              const score = '${{ steps.score.outputs.score }}' || '0';
              const badge = '${{ steps.score.outputs.badge }}' || '';
              
              let body = '## üéÆ Term Review\n\n';
              
              if (!isValid) {
                body += '### ‚ùå Validation FAILED!\n\n';
                body += 'Your submission has errors that need to be fixed:\n\n';
                body += '```\n';
                body += validationOutput.replace(/‚úÖ.*\n/g, '').trim();
                body += '\n```\n\n';
                body += '### üìù How to Fix\n\n';
                body += '1. Check that your YAML syntax is correct (proper indentation, colons, etc.)\n';
                body += '2. Ensure each term has both `term` and `definition` fields\n';
                body += '3. Make sure text fields are strings (use quotes if needed)\n';
                body += '4. Arrays like `tags` and `see_also` should use proper YAML list syntax\n\n';
                body += '### ‚ú® Valid Term Example\n\n';
                body += '```yaml\n';
                body += '- term: "Example"\n';
                body += '  definition: "A sample to demonstrate correct format"\n';
                body += '  explanation: "Optional longer explanation"\n';
                body += '  humor: "Optional funny take"\n';
                body += '  tags: ["example", "demo"]\n';
                body += '  see_also: ["Sample", "Demo"]\n';
                body += '```\n';
              } else {
                body += '### ‚úÖ Validation Passed!\n\n';
                body += `### üìä Quality Score: ${score}/100\n\n`;
                
                if (parseInt(score) >= 90) {
                  body += '# üèÜ LEGENDARY! \n';
                  body += 'This is absolutely perfect! You are a FOSS Glossary champion! üéâ\n';
                } else if (parseInt(score) >= 80) {
                  body += '## üî• AMAZING! \n';
                  body += 'This is top-tier content! Outstanding contribution! üåü\n';
                } else if (parseInt(score) >= 70) {
                  body += '### üí™ Great job! \n';
                  body += 'This is a solid contribution! Well done! üëè\n';
                } else if (parseInt(score) >= 60) {
                  body += '### üëç Good work! \n';
                  body += 'Nice contribution! Consider adding humor or references for bonus points! üìà\n';
                } else {
                  body += '### üå± Thanks for contributing! \n';
                  body += 'Every term helps! Here\'s how to score higher:\n';
                  body += '- **Humor**: Add a funny take (up to 30 points)\n';
                  body += '- **Explanation**: Add context (20 points)\n';
                  body += '- **Cross-references**: Link related terms (20 points)\n';
                  body += '- **Tags**: Categorize your term (10 points)\n';
                }
                
                if (badge) {
                  body += `\n### üèÜ Achievements Unlocked!\n`;
                  const badges = badge.split(',').map(b => b.trim());
                  badges.forEach(b => {
                    body += `- ${b}\n`;
                  });
                }
                
                body += '\n---\n';
                body += '*üí° Pro tip: The best terms combine accuracy with humor. Make us laugh while we learn!*';
              }
              
              // Check if we already commented
              const { data: comments } = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
              });
              
              const botComment = comments.find(comment => 
                comment.user.type === 'Bot' && comment.body.includes('üéÆ Term Review')
              );
              
              if (botComment) {
                await github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: botComment.id,
                  body: body
                });
              } else {
                await github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: body
                });
              }
            } catch (error) {
              console.error('Error posting comment:', error);
              // Don't fail the workflow if commenting fails
            }

  update-stats:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0  # Need full history for contributor stats
      
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: '20'
      
      - name: Install dependencies
        run: npm install js-yaml
      
      - name: Validate before updating stats
        run: |
          node scripts/validateTerms.js
          if [ $? -ne 0 ]; then
            echo "‚ùå Terms validation failed on main branch!"
            exit 1
          fi
      
      - name: Update README stats
        run: |
          node scripts/updateReadmeStats.js
      
      - name: Commit and push changes
        run: |
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add README.md
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "üìä Update stats after merge [skip ci]"
            git push
          fi